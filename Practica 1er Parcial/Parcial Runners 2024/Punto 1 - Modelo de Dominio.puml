@startuml

Class Runner {
    - nombre : String
    - apellido : String
    - peso : Integer
    - altura : Integer
    - edad : Integer
    - tipoDeSangre : TipoDeSangre
    - lesiones : List<Lesion>
    - zapatillas : List<Zapatilla>
    - zapatillaFavorita : Zapatilla
    - capacidadFisica : Integer
}

enum TipoDeSangre {
    A+,
    A-,
    B+,
    B-,
    AB+,
    AB-,
    0+,
    0-
}

Class Lesion {
    - nombreLesion : String
    - especificacion : String
}

Class TipoZapatilla {
    - marca : Marca
    - modelo : Modelo
    - fotos : List<Fotografia>
}

Class Marca {
    - nombre : String
}

Class Modelo {
    - nombre : String
}

Class Fotografia {
    - url : String
}

Class Zapatilla {
    - tipoZapatilla : TipoZapatilla
    - anioAdquisicion : Integer
    - numeroDeTalle : Talle
    - fotografias : List<Fotografia>
    - cantidadDeKmRecorridos : Integer

    + vidaUtil() : Integer
}

Class Talle {
    - numero : Integer
    - unidadDeMedida : UnidadDeMedida
}

enum UndiadDeMedida {
    EU,
    US,
    UK
}

Class Travesia {
    - nombre : String
    - descripcionDetallada : String
    - fotografias : Map<Fotografia, String>
    - nivelDeDificultad : NivelDeDificultad
    - tipoDeTerreno : TipoDeTerreno
    - duracionEstimada : LocalDateTime
    - distanciaTotal : Integer
    - puntoDePartida : Lugar
    - puntoDeSalida : Lugar
    - puntosDeApoyo : List<PuntoDeApoyo>
}

enum NivelDeDificultad {
    PRINCIPIANTE,
    INTERMEDIO,
    AVANZADO,
    EXTREMO
}

Class TipoDeTerreno {
    - nombre : String
}

Class Lugar {
    - latitud : Integer
    - longitud : Integer
}

Class PuntoDeApoyo {
    - tipo : TipoDePuntoDeApoyo
    - descripcion : String
    - ubicacionGeografica : Lugar
    - fotografias : List<Fotografia>
}

Class TipoDePuntoDeApoyo {
    - nombre : String
}

Class Fondo {
    - runner : Runner
    - fecha : LocalDate
    - travesia : Travesia
    - necesidadesParticulares : TipoDePuntoDeApoyo
    - zapatilla : Zapatilla
    - estado : EstadoDeFondo

    + obtenerZapatillaFavorita () : Zapatilla
}

enum EstadoDeFondo {
    PLANIFICADO,
    FINALIZADO
}

Class Sugerencia {
    - fondo : Fondo
    - puntosDeApoyoAVisitar : List<PuntoDeApoyo>
    - precaucionesDeSeguridad : List<MedidaDeSeguridad>

    + lugaresDeApoyo() : List<PuntoDeApoyo>
}

Class MedidaDeSeguridad {
    - nombre : String
    - descripcion : String
}

Class Recomendacion {
    - runner : Runner
    - zapatillasRecomendadas : List<TipoZapatilla>
    - recomendacionZapatillas : IRecomendacionDeZapatillas

    + agregarZapatillasARecomendar() : void
}

interface IRecomendacionDeZapatillas {
    + obtenerRecomendacion(Runner unRunner) : List<TipoZapatilla>
}

Class AdapterTECHShoes implements IRecomendacionDeZapatillas {
    - api : TECHShoes

    + obtenerRecomendacion(Runner unRunner) : List<TipoZapatilla>
    + mapearResponseTECHShoesATipoZapatilla() : TipoZapatilla
}

Class TECHShoes {
    + obtenerZapatillas() : List<ZapatillaAPITECHShoes>
}

Class ZapatillaAPITECHShoes {
    - shoe_id : Integer
    - brand : String
    - model : String
    - sizes : List<Talle>
    - photos : List<Fotografia>
}

interface ICalculoDePesoMochila {
    + calcularCarga(Runner unRunner, Fondo unFondo) : Integer
}

Class CalculoOptimista implements ICalculoDePesoMochila {
    + calcularCarga(Runner unRunner, Fondo unFondo) : Integer
}

Class CalculoPesimista implements ICalculoDePesoMochila {
    + calcularCarga(Runner unRunner, Fondo unFondo) : Integer
}

Class Articulo {
    - nombre : String
    - peso : Integer
    - categoria : Categoria
}

Class Categoria {
    - nombre : String
    - descripcion : String
}

Class RecomendacionDeArticulos {
    - runner : Runner
    - fondo : Fondo
    - calculo : ICalculoDePesoMochila

    + calcularPesoMaximo() : Integer
    + recomendarArticulos() : List<Articulo>
}

Class FeedbackDeTravesia {
    - fondo : Fondo
    - opcion : TipoDeOpcion
    - preguntas : List<Pregunta>
    - respuestas : List<Respuesta>
}

enum TipoDeOpcion {
    EXCELENTE,
    BUENO,
    INTERMEDIO,
    DEBERIA_MEJORAR
}

Class Pregunta {
    - tipoDePregunta : TipoDePregunta
    - preguntaRealizada : String
}

Class Respuesta {
    - pregunta : Pregunta
    - respuesta : String
}

enum TipoDePregunta {
    SELECCIONAR_CORRESPONDIENTES,
    PREGUNTA_CERRADA,
    TEXTO
}

Runner o-- Zapatilla : "*"
Runner o-- Lesion
Runner o-- TipoDeSangre

Travesia *-- Fotografia
Travesia --> NivelDeDificultad
Travesia *-- Lugar
Travesia --> PuntoDeApoyo : "*"
Travesia --> TipoDeTerreno

PuntoDeApoyo *-- Lugar
PuntoDeApoyo *-- Fotografia : "*"
PuntoDeApoyo --> TipoDePuntoDeApoyo

Fondo o-- Runner
Fondo o-- Travesia
Fondo --> TipoDePuntoDeApoyo
Fondo --> Zapatilla
Fondo -r-> EstadoDeFondo

Zapatilla *-- TipoZapatilla
Zapatilla --> Talle
Zapatilla *-- Fotografia

TipoZapatilla *-- Fotografia
TipoZapatilla *-- Marca
TipoZapatilla *-- Modelo

Talle --> UndiadDeMedida

FeedbackDeTravesia --> Fondo
FeedbackDeTravesia --> TipoDeOpcion
FeedbackDeTravesia o-- Pregunta : "*"
FeedbackDeTravesia o-- Respuesta : "*"

Pregunta --> TipoDePregunta

Respuesta --> Pregunta

Articulo --> Categoria

RecomendacionDeArticulos ..> Articulo
RecomendacionDeArticulos o-- Runner
RecomendacionDeArticulos o-- Fondo
RecomendacionDeArticulos --> ICalculoDePesoMochila

Recomendacion o-- Runner
Recomendacion o-- TipoZapatilla : "*"
Recomendacion --> IRecomendacionDeZapatillas

AdapterTECHShoes --> TECHShoes
AdapterTECHShoes ..> Runner

TECHShoes ..> ZapatillaAPITECHShoes

Sugerencia --> Fondo
Sugerencia o-- PuntoDeApoyo : "*"
Sugerencia o-- MedidaDeSeguridad : "*"


@enduml